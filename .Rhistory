ungroup %>%
separate(Policy_areas, sep = ",", c("Policy_area_1", "Policy_area_2","Policy_area_3","Policy_area_4","Policy_area_5","Policy_area_6","Policy_area_7")) # separate the policy areas
df_party <- df %>%
group_by(Name, Date, Fraktion, Policy_areas) %>%
summarise(Yes_party = sum(Stimme == "Dafür gestimmt"),
No_party = sum(Stimme == "Dagegen gestimmt"),
Abstain_party = sum(Stimme == "Enthalten"),
Absent_party = sum(Stimme == "Nicht beteiligt"),
Yes_share = Yes_party / sum(Yes_party, No_party),
Party_yes = ifelse(Yes_share >= 0.8, 1,0) # If there are more than 80 % of people voting with yes
) %>%
filter(!between(Yes_share, 0.2, 0.8)) %>% # regard only votes of party-unity
mutate(Opposition = Fraktion != "CDU/CSU" & Fraktion != "SPD") %>%
ungroup %>%
separate(Policy_areas, sep = ",", c("Policy_area_1", "Policy_area_2","Policy_area_3","Policy_area_4","Policy_area_5","Policy_area_6","Policy_area_7")) # separate the policy areas
View(df_party)
df_party <- df %>%
group_by(Name, Date, Fraktion, Policy_areas) %>%
summarise(Yes_party = sum(Stimme == "Dafür gestimmt"),
No_party = sum(Stimme == "Dagegen gestimmt"),
Abstain_party = sum(Stimme == "Enthalten"),
Absent_party = sum(Stimme == "Nicht beteiligt"),
Yes_share = Yes_party / sum(Yes_party, No_party),
Party_yes = ifelse(Yes_share >= 0.8, 1,0) # If there are more than 80 % of people voting with yes
) %>%
filter(!between(Yes_share, 0.2, 0.8)) %>% # regard only votes of party-unity
mutate(Opposition = ifelse(Fraktion != "CDU/CSU" & Fraktion != "SPD",1,0)) %>%
ungroup %>%
separate(Policy_areas, sep = ",", c("Policy_area_1", "Policy_area_2","Policy_area_3","Policy_area_4","Policy_area_5","Policy_area_6","Policy_area_7")) # separate the policy areas
View(df_party)
# create a separate data frame
vote_df <- df_party %>%
group_by(Name) %>%
filter(Opposition == FALSE) %>%
summarise(Gov_votes = sum(Party_yes)) %>%
mutate(Gov_Yes = ifelse(Gov_votes == 2, 1,0 ))
# create a separate data frame
vote_df <- df_party %>%
group_by(Name) %>%
filter(Opposition == 0) %>%
summarise(Gov_votes = sum(Party_yes)) %>%
mutate(Gov_Yes = ifelse(Gov_votes == 2, 1,0 ))
vote_df
# merge the two dataframes
df_party <- merge(x = df_party, y = vote_df, by = "Name")
# filter for only when government voted yes
df_party <- df_party %>%
filter(Gov_Yes == 1)
# insert your individual api-key here.
mp_setapikey("manifesto_apikey.txt")
mp_df <-mp_maindataset() %>%
filter(countryname == "Germany") %>%
filter(edate == "2017-09-24") %>%
dplyr::select(partyabbrev, edate, date, rile, pervote, absseat, totseats) %>%
mutate(Fraktion = dplyr::recode(partyabbrev,
"90/Greens" = "DIE GRÜNEN",
"DZ" = "ZENTRUM",
"Greens/90" = "DIE GRÜNEN",
"L-PDS" = "DIE LINKE",
"LINKE" = "DIE LINKE",
"SSW" = "fraktionslos",
"PDS" = "DIE LINKE"),
Rel_Seats = absseat / totseats) %>%
dplyr::select(- absseat, -totseats)
coal_rile <- mean(mp_df$rile[mp_df$Fraktion == "SPD" | mp_df$Fraktion == "CDU/CSU"])
coal_rile
df_party <- merge(df_party, mp_df, by = "Fraktion")
df_party <- df_party %>%
mutate(Date_new = dmy(Date),
Corona = ifelse(Date_new >= "2020-03-01", 1,0),
Corona_dur = Date_new - as.Date("2020-03-01"),
Health = ifelse(Policy_area_1 == "Gesundheit",1,0),
# 2. create variable indicating days until next fed. election
Days_next_ele = as.Date("2021-09-26") - Date_new,
Rile_Dist = abs(rile - coal_rile))
write_csv2(df_party, "Dataframe_opp_corona.csv")
df <- read_csv2("Dataframe_opp_corona.csv")
df_opposition <- df %>%
filter(Opposition == 1) %>%
filter(Fraktion %in% c("FDP","CDU/CSU","AfD","DIE GRÜNEN","DIE LINKE","SPD")) %>%
mutate(Health = as.numeric(Health),
Corona_leg = ifelse(grepl("[Cc]orona", Name),1,0),
AfD = ifelse(Fraktion == "AfD",1,0))
ll_logit <- function(theta, y, X) {
# theta consists merely of beta (dim is ncol(X))
beta <- theta[1:ncol(X)]
# linear predictor; make sure that X is stored as.matrix
mu <- X %*% beta
# response function
p <- 1 / (1 + exp(-mu))
# log-likelihood
ll <- y * log(p) + (1 - y) * log(1 - p)
# sum
ll <- sum(ll)
return(ll)
}
logit_df <- df_opposition %>%
dplyr::select("Party_yes","Health", "Corona","Days_next_ele", "Rel_Seats", "Rile_Dist", "AfD") %>%
na.omit %>%
mutate(HealthCorona = Health * Corona)
View(df_opposition)
unique(df_opposition$AfD)
table(df_opposition$AfD)
logit_df <- df_opposition %>%
dplyr::select("Party_yes","Health", "Corona","Days_next_ele", "Rel_Seats", "Rile_Dist", "AfD") %>%
na.omit %>%
mutate(HealthCorona = Health * Corona)
X <- as.matrix(cbind(1,logit_df[,2:ncol(logit_df)]))
y <- logit_df[,1]
# start values
startvals <- rep(0,ncol(X))
# optimize
res <- optim(
par = startvals,
fn = ll_logit,
y = y,
X = X,
control = list(fnscale = -1),
hessian = TRUE,
method = "BFGS"
)
format_probit_output <- function(res, X, Caption) {
# Do we have specified variable names in the model?
if (is.null(colnames(X))) {
var_names <- c("Intercept", paste("Var", 1:(ncol(X) - 1)))
colnames(X) <- var_names
}
# Estimates:
probit_coef <- res$par
# Standard Errors:
probit_se <- sqrt(diag(solve(-res$hessian)))
# t value:
t <- probit_coef / probit_se
# degrees of freedom:
df <- nrow(X) - length(probit_coef)
t.val <- qt(0.975, df) # critical value of t
# p value:
p <-  2 * pt(-abs(t), df)
out <- cbind(probit_coef, probit_se, p)[1:ncol(X), ]
colnames(out) <- c("ML Estimates", "ML SE", "Pr(>|t|)")
if(is.null(colnames(X[,1]))){
colnames(X) <- c("Intercept",colnames(X[,2:ncol(X)]))
}
rownames(out) <- colnames(X)
# Headline
cat(paste0("\n",Caption,"\n"), rep("=", 40), "\n", sep = "")
#print(out)
return(model = out)
}
format_probit_output(res = res, X = X, Caption = "Probit Model of Legislative Voting")
res
# Estimates:
probit_coef <- res$par
# Standard Errors:
probit_se <- sqrt(diag(solve(-res$hessian)))
solve(-res$hessian)
ll_logit <- function(theta, y, X) {
# theta consists merely of beta (dim is ncol(X))
beta <- theta[1:ncol(X)]
# linear predictor; make sure that X is stored as.matrix
mu <- X %*% beta
# response function
p <- 1 / (1 + exp(-mu))
# log-likelihood
ll <- y * log(p) + (1 - y) * log(1 - p)
# sum
ll <- sum(ll)
return(ll)
}
logit_df <- df_opposition %>%
dplyr::select("Party_yes","Health", "Corona","Days_next_ele", "Rel_Seats", "Rile_Dist", "AfD") %>%
na.omit %>%
mutate(HealthCorona = Health * Corona)
X <- as.matrix(cbind(1,logit_df[,2:ncol(logit_df)]))
y <- logit_df[,1]
# start values
startvals <- rep(0,ncol(X))
# optimize
res <- optim(
par = startvals,
fn = ll_logit,
y = y,
X = X,
control = list(fnscale = -1),
hessian = TRUE,
method = "BFGS"
)
res
y
X
# Standard Errors:
probit_se <- sqrt(diag(solve(-res$hessian)))
ncol(X)
View(X)
logit_df <- df_opposition %>%
dplyr::select("Party_yes","Health", "Corona","Days_next_ele", "Rel_Seats", "Rile_Dist") %>%
na.omit %>%
mutate(HealthCorona = Health * Corona)
X <- as.matrix(cbind(1,logit_df[,2:ncol(logit_df)]))
y <- logit_df[,1]
# start values
startvals <- rep(0,ncol(X))
# optimize
res <- optim(
par = startvals,
fn = ll_logit,
y = y,
X = X,
control = list(fnscale = -1),
hessian = TRUE,
method = "BFGS"
)
format_probit_output <- function(res, X, Caption) {
# Do we have specified variable names in the model?
if (is.null(colnames(X))) {
var_names <- c("Intercept", paste("Var", 1:(ncol(X) - 1)))
colnames(X) <- var_names
}
# Estimates:
probit_coef <- res$par
# Standard Errors:
probit_se <- sqrt(diag(solve(-res$hessian)))
# t value:
t <- probit_coef / probit_se
# degrees of freedom:
df <- nrow(X) - length(probit_coef)
t.val <- qt(0.975, df) # critical value of t
# p value:
p <-  2 * pt(-abs(t), df)
out <- cbind(probit_coef, probit_se, p)[1:ncol(X), ]
colnames(out) <- c("ML Estimates", "ML SE", "Pr(>|t|)")
if(is.null(colnames(X[,1]))){
colnames(X) <- c("Intercept",colnames(X[,2:ncol(X)]))
}
rownames(out) <- colnames(X)
# Headline
cat(paste0("\n",Caption,"\n"), rep("=", 40), "\n", sep = "")
#print(out)
return(model = out)
}
format_probit_output(res = res, X = X, Caption = "Probit Model of Legislative Voting")
res
logit_df <- df_opposition %>%
dplyr::select("Party_yes","Health", "Corona","Days_next_ele", "Rel_Seats", "Rile_Dist", "AfD") %>%
na.omit %>%
mutate(HealthCorona = Health * Corona)
X <- as.matrix(cbind(1,logit_df[,2:ncol(logit_df)]))
y <- logit_df[,1]
# start values
startvals <- rep(0,ncol(X))
# optimize
res <- optim(
par = startvals,
fn = ll_logit,
y = y,
X = X,
control = list(fnscale = -1),
hessian = TRUE,
method = "BFGS"
)
format_probit_output(res = res, X = X, Caption = "Probit Model of Legislative Voting")
format_probit_output(res = res, X = X, Caption = "Probit Model of Legislative Voting")
install.packages("EnvStats")
library(EnvStats)
serialCorrelationTest(X)
?serialCorrelationTest
library(MESS)
install.packages("MESS")
library(MESS)
pairwise.cor.test(X)
?pairwise.cor.test
cor(X)
logit_df <- df_opposition %>%
dplyr::select("Party_yes","Health", "Corona","Days_next_ele", "Rel_Seats", "Rile_Dist", "AfD") %>%
na.omit #%>%
#  mutate(HealthCorona = Health * Corona)
X <- as.matrix(cbind(1,logit_df[,2:ncol(logit_df)]))
cor(X)
y <- logit_df[,1]
# start values
startvals <- rep(0,ncol(X))
# optimize
res <- optim(
par = startvals,
fn = ll_logit,
y = y,
X = X,
control = list(fnscale = -1),
hessian = TRUE,
method = "BFGS"
)
format_probit_output <- function(res, X, Caption) {
# Do we have specified variable names in the model?
if (is.null(colnames(X))) {
var_names <- c("Intercept", paste("Var", 1:(ncol(X) - 1)))
colnames(X) <- var_names
}
# Estimates:
probit_coef <- res$par
# Standard Errors:
probit_se <- sqrt(diag(solve(-res$hessian)))
# t value:
t <- probit_coef / probit_se
# degrees of freedom:
df <- nrow(X) - length(probit_coef)
t.val <- qt(0.975, df) # critical value of t
# p value:
p <-  2 * pt(-abs(t), df)
out <- cbind(probit_coef, probit_se, p)[1:ncol(X), ]
colnames(out) <- c("ML Estimates", "ML SE", "Pr(>|t|)")
if(is.null(colnames(X[,1]))){
colnames(X) <- c("Intercept",colnames(X[,2:ncol(X)]))
}
rownames(out) <- colnames(X)
# Headline
cat(paste0("\n",Caption,"\n"), rep("=", 40), "\n", sep = "")
#print(out)
return(model = out)
}
format_probit_output(res = res, X = X, Caption = "Probit Model of Legislative Voting")
sim_function <-
function(nsim = 1000,
coefs,
vcov,
scenario,
response_function,
predicted_values = F,
stochastic_component) {
if (is.null(dim(scenario))) {
stop("The scenario needs to be in a matrix.")
}
if (length(coefs) != ncol(scenario)) {
stop("The scenario and the parameter vector don't fit.")
}
# Set up the sampling distribution
S <- mvrnorm(nsim, coefs, vcov)
# Calculate mu and p
# The linear component
mu <- S %*% t(scenario)
# The response function
p <- response_function(mu)
# Calculate ev, observed value approach
ev <- apply(p, 1, mean)
if (predicted_values) {
pv <-
array(stochastic_component(ndraws = prod(dim(ev)), p = ev), dim = dim(ev))
return(list(ev = ev, pv = pv))
}
return(list(ev = ev))
}
response_function <- function(x) {
1 / (1 + exp(-x))
}
stochastic_component <- function(ndraws, p) {
rbinom(n = ndraws, size = 1, prob = p)
}
coefs <- res$par[1:ncol(X)]
vcov <- solve(-res$hessian[(1:ncol(X)), (1:ncol(X))])
View(df)
logit_df <- df_opposition %>%
dplyr::select("Party_yes","Health", "Corona","Days_next_ele", "Rel_Seats", "Rile_Dist", "AfD","Corona_dur") %>%
na.omit #%>%
#  mutate(HealthCorona = Health * Corona)
X <- as.matrix(cbind(1,logit_df[,2:ncol(logit_df)]))
X
logit_df <- df_opposition %>%
dplyr::select("Party_yes","Health", "Corona","Days_next_ele", "Rel_Seats", "Rile_Dist", "AfD","Corona_dur") %>%
na.omit %>%
mutate(CoronaCorona_dur = Corona_dur * Corona)
X <- as.matrix(cbind(1,logit_df[,2:ncol(logit_df)]))
cor(X)
y <- logit_df[,1]
# start values
startvals <- rep(0,ncol(X))
# optimize
res <- optim(
par = startvals,
fn = ll_logit,
y = y,
X = X,
control = list(fnscale = -1),
hessian = TRUE,
method = "BFGS"
)
res
format_probit_output <- function(res, X, Caption) {
# Do we have specified variable names in the model?
if (is.null(colnames(X))) {
var_names <- c("Intercept", paste("Var", 1:(ncol(X) - 1)))
colnames(X) <- var_names
}
# Estimates:
probit_coef <- res$par
# Standard Errors:
probit_se <- sqrt(diag(solve(-res$hessian)))
# t value:
t <- probit_coef / probit_se
# degrees of freedom:
df <- nrow(X) - length(probit_coef)
t.val <- qt(0.975, df) # critical value of t
# p value:
p <-  2 * pt(-abs(t), df)
out <- cbind(probit_coef, probit_se, p)[1:ncol(X), ]
colnames(out) <- c("ML Estimates", "ML SE", "Pr(>|t|)")
if(is.null(colnames(X[,1]))){
colnames(X) <- c("Intercept",colnames(X[,2:ncol(X)]))
}
rownames(out) <- colnames(X)
# Headline
cat(paste0("\n",Caption,"\n"), rep("=", 40), "\n", sep = "")
#print(out)
return(model = out)
}
format_probit_output(res = res, X = X, Caption = "Probit Model of Legislative Voting")
sim_function <-
function(nsim = 1000,
coefs,
vcov,
scenario,
response_function,
predicted_values = F,
stochastic_component) {
if (is.null(dim(scenario))) {
stop("The scenario needs to be in a matrix.")
}
if (length(coefs) != ncol(scenario)) {
stop("The scenario and the parameter vector don't fit.")
}
# Set up the sampling distribution
S <- mvrnorm(nsim, coefs, vcov)
# Calculate mu and p
# The linear component
mu <- S %*% t(scenario)
# The response function
p <- response_function(mu)
# Calculate ev, observed value approach
ev <- apply(p, 1, mean)
if (predicted_values) {
pv <-
array(stochastic_component(ndraws = prod(dim(ev)), p = ev), dim = dim(ev))
return(list(ev = ev, pv = pv))
}
return(list(ev = ev))
}
response_function <- function(x) {
1 / (1 + exp(-x))
}
stochastic_component <- function(ndraws, p) {
rbinom(n = ndraws, size = 1, prob = p)
}
coefs <- res$par[1:ncol(X)]
vcov <- solve(-res$hessian[(1:ncol(X)), (1:ncol(X))])
min(logit_df$Corona_dur)
max(logit_df$Corona_dur)
scenarios_duration <- seq(min(logit_df$Corona_dur),max(logit_df$Corona_dur),length.out = 50)
scenarios_duration
?seq
scenarios_duration <- seq(min(logit_df$Corona_dur),max(logit_df$Corona_dur),by = 1)
scenarios_duration
scenarios_corona <- c(0,1)
scenarios_duration <- seq(min(logit_df$Corona_dur),max(logit_df$Corona_dur),by = 1)
vcov
scenarios_duration
cases <- array(NA, c(dim(X), # 1 & 2
length(scenarios_corona), # 3
length(scenarios_duration))) # 4
cases[, , ,] <- X
cases
cases
# scenarios
for(i in 1:length(scenarios_corona)){
for(j in 1:length(scenarios_duration)){
cases[,which(colnames(X) == "Corona"),i,] <- scenarios_corona[i]
cases[,which(colnames(X) == "Corona_dur"),,j] <- scenarios_duration[j]
}
}
for(i in 1:length(scenarios_corona)){
for(j in 1:length(scenarios_duration)){
cases[,which(colnames(X) == "CoronaCorona_dur"),i,] <- cases[,which(colnames(X) == "Corona_dur"),i,] * scenarios_corona[i]
cases[,which(colnames(X) == "CoronaCorona_dur"),,j] <- cases[,which(colnames(X) == "Corona"),,j] * scenarios_health[j]
}
}
ev_corona <- matrix(NA, nrow = 1000, ncol = length(scenarios_corona)+length(scenarios_duration))
ev_corona
ev_corona
for(i in 1:length(scenarios_corona)){
ev_corona[,i] <- sim_function(
coefs = coefs,
vcov = vcov,
response_function = response_function,
stochastic_component = stochastic_component,
scenario = cases[,,i,j],
predicted_values = F
)$ev
for(j in 1:length(scenarios_duration)) {
ev_corona[,i+j] <- sim_function(
coefs = coefs,
vcov = vcov,
response_function = response_function,
stochastic_component = stochastic_component,
scenario = cases[,,i,j],
predicted_values = F
)$ev
cat("Round",j,i)
}
}
ev_corona_mean <- apply(ev_corona, 2, mean)
ev_corona_mean
ev_corona_ci <- t(apply(ev_corona, 2, quantile, c(0.025, 0.975)))
ev_corona
head(ev_corona)
str(ev_corona)
